version: '3'

services:
  order-service:
    build:
      context: .
      dockerfile: order-service.Dockerfile
    restart: always
    container_name: SpringBootKafkaEventDrivenArchitecture-OrderService
    ports:
      - ${ORDER_APP_PORT}:8080
    env_file:
      - ./.env
    depends_on:
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:9092
  sms-service:
    build:
      context: .
      dockerfile: sms-service.Dockerfile
    restart: always
    container_name: SpringBootKafkaEventDrivenArchitecture-SMSService
    ports:
      - ${SMS_APP_PORT}:8080
    env_file:
      - ./.env
    depends_on:
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:9092
  stock-service:
    build:
      context: .
      dockerfile: stock-service.Dockerfile
    restart: always
    container_name: SpringBootKafkaEventDrivenArchitecture-StockService
    ports:
      - ${STOCK_APP_PORT}:8080
    env_file:
      - ./.env
    depends_on:
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:9092
  kafka:
    image: apache/kafka:latest
    restart: always
    container_name: SpringBootKafkaEventDrivenArchitecture-kafkaBroker
    ports:
      - ${KAFKA_APP_PORT}:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3